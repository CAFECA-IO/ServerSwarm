#!/bin/bash

LOG_FILE="${LOG_FILE}"
SLACK_WEBHOOK_URL="${SLACK_WEBHOOK_URL}"
TARGET_BRANCH="${TARGET_BRANCH}"
SERVER_NAME="${SERVER_NAME}"
APP_PATH="${APP_PATH}"
WEB_URL="${WEB_URL}"
BASE_REPO_URL="${BASE_REPO_URL}"

REPO_URL="$BASE_REPO_URL/tree/$TARGET_BRANCH"

IS_SUCCESS=false
IS_NOTIFICATION_NEEDED=false

# Info: (20241016 - Shirley) ÂèñÂæóËÖ≥Êú¨ÈñãÂßãÂü∑Ë°åÁöÑÊôÇÈñìÔºåÊ†ºÂºèÁÇ∫ HH:MM:SS MONTH/DAY/YEAR
TIME_START=$(date +%H:%M:%S\ %m/%d/%Y)
SECONDS_START=$(date +%s)

# Info: (20241016 - Shirley) Êñ∞Â¢ûÁôºÈÄÅ Slack Ë®äÊÅØÁöÑÂáΩÊï∏
send_slack_message() {
    local message="$1"
    curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"$message\"}" "$SLACK_WEBHOOK_URL"
}

# Info: (20241016 - Shirley) ÂÆâË£ù jq ÔºåÁî®‰æÜËß£Êûê package.json
if ! command -v jq &> /dev/null; then
    apt-get update && apt-get install -y jq
fi

# Info: (20241016 - Shirley) Á¢∫‰øùÊó•Ë™åÁõÆÈåÑÂ≠òÂú®
mkdir -p $(dirname "$LOG_FILE")

# Info: (20241016 - Shirley) Â¶ÇÊûúÊó•Ë™åÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåÂâáÂâµÂª∫ÂÆÉ
if [ ! -f "$LOG_FILE" ]; then
    touch "$LOG_FILE"
    echo "$(date): Êó•Ë™åÊñá‰ª∂Â∑≤ÂâµÂª∫" >> "$LOG_FILE"
fi

# Info: (20241016 - Shirley) Ë®òÈåÑËÖ≥Êú¨ÈñãÂßãÂü∑Ë°åÁöÑÊôÇÈñì
echo "$(date): ÈñãÂßãÊ™¢Êü•Êõ¥Êñ∞" >> $LOG_FILE

# Info: (20241016 - Shirley) ÈÄ≤ÂÖ• app ÁõÆÈåÑ
cd $APP_PATH

# Info: (20241016 - Shirley) Áç≤ÂèñÈÅ†Á´ØÊõ¥Êñ∞
if ! git fetch origin; then
    echo "ÁÑ°Ê≥ïÁç≤ÂèñÈÅ†Á´ØÊõ¥Êñ∞ÔºåË´ãÊ™¢Êü•Á∂≤Áµ°ÈÄ£Êé•ÊàñÂÄâÂ∫´Ê¨äÈôê"
    exit 1
fi

LOCAL_LAST_COMMIT=$(git rev-parse HEAD)
REMOTE_LAST_COMMIT=$(git rev-parse origin/$TARGET_BRANCH)

LAST_COMMIT_URL="$BASE_REPO_URL/commit/$REMOTE_LAST_COMMIT"

LOCAL_VERSION=$(jq -r .version package.json)
REMOTE_VERSION=$(git show origin/$TARGET_BRANCH:package.json | jq -r .version)

echo "$(date) TIME_START (UTC): $TIME_START" >> $LOG_FILE
echo "$(date) LOCAL_LAST_COMMIT: $LOCAL_LAST_COMMIT" >> $LOG_FILE
echo "$(date) REMOTE_LAST_COMMIT: $REMOTE_LAST_COMMIT" >> $LOG_FILE
echo "$(date) LOCAL_VERSION: $LOCAL_VERSION" >> $LOG_FILE
echo "$(date) REMOTE_VERSION: $REMOTE_VERSION" >> $LOG_FILE
echo "$(date): ÁõÆÊ®ôÂàÜÊîØ: $TARGET_BRANCH" >> $LOG_FILE

if [ "$LOCAL_LAST_COMMIT" != "$REMOTE_LAST_COMMIT" ]; then
    echo "$(date): ÁôºÁèæÊõ¥Êñ∞ÔºåÈñãÂßãÊãâÂèñÊñ∞‰ª£Á¢º" >> $LOG_FILE
    LOADING_MESSAGE="üîÑ \`$SERVER_NAME\` is in the process of building\nVersion: $REMOTE_VERSION\nBranch: $TARGET_BRANCH\nDetails: <$WEB_URL|web>ÔΩú<$REPO_URL|repo>ÔΩú<$LAST_COMMIT_URL|commit>"
    send_slack_message "$LOADING_MESSAGE"

    if git pull origin $TARGET_BRANCH && npm install && npm run build && pm2 restart $SERVER_NAME; then
        echo "$(date): Êõ¥Êñ∞ÂÆåÊàê" >> $LOG_FILE
        IS_SUCCESS=true
        IS_NOTIFICATION_NEEDED=true
    else
        echo "$(date): Êõ¥Êñ∞Â§±Êïó" >> $LOG_FILE
        IS_SUCCESS=false
        IS_NOTIFICATION_NEEDED=true
    fi
else
    echo "$(date): Ê≤íÊúâÁôºÁèæÊõ¥Êñ∞" >> $LOG_FILE
    IS_SUCCESS=true
    IS_NOTIFICATION_NEEDED=false
fi

# Info: (20241016 - Shirley) ÂèñÂæóËÖ≥Êú¨ÁµêÊùüÂü∑Ë°åÁöÑÊôÇÈñì
TIME_END=$(date +%H:%M:%S\ %m/%d/%Y)
SECONDS_END=$(date +%s)

# Info: (20241016 - Shirley) Ë®àÁÆóÂü∑Ë°åÊôÇÈñìÔºàÁßíÔºâ
DURATION=$((SECONDS_END - SECONDS_START))
# Info: (20241016 - Shirley) Â∞áÁßíÊï∏ËΩâÊèõÁÇ∫Â∞èÊôÇ:ÂàÜÈêò:ÁßíÊ†ºÂºè
DURATION_FORMATTED=$(printf '%02d:%02d:%02d' $((DURATION/3600)) $((DURATION%3600/60)) $((DURATION%60)))

echo "$(date) TIME_END (UTC): $TIME_END" >> $LOG_FILE
echo "$(date) Á∏ΩÂü∑Ë°åÊôÇÈñì: $DURATION_FORMATTED" >> $LOG_FILE

if [ "$IS_SUCCESS" = true ] && [ "$IS_NOTIFICATION_NEEDED" = true ]; then
    SUCCESS_MESSAGE="‚úÖ \`$SERVER_NAME\` update successful!\nVersion: $REMOTE_VERSION\nBranch: $TARGET_BRANCH\nDuration: $DURATION_FORMATTED\nDetails: <$WEB_URL|web>ÔΩú<$REPO_URL|repo>ÔΩú<$LAST_COMMIT_URL|commit>"
    send_slack_message "$SUCCESS_MESSAGE"
else 
    if [ "$IS_SUCCESS" = false ] && [ "$IS_NOTIFICATION_NEEDED" = true ]; then
        FAILED_MESSAGE="‚ùå \`$SERVER_NAME\` failed to build!\nVersion: $REMOTE_VERSION\nBranch: $TARGET_BRANCH\nDuration: $DURATION_FORMATTED\nDetails: <$WEB_URL|web>ÔΩú<$REPO_URL|repo>ÔΩú<$LAST_COMMIT_URL|commit>"
        send_slack_message "$FAILED_MESSAGE"
    fi
fi

echo "$(date): Ê™¢Êü•Êõ¥Êñ∞ÁµêÊùü" >> $LOG_FILE
echo "----------------------------" >> $LOG_FILE